spring:
  profiles:
    group:
      "default": "local, member-local, project-local, skill-local"
      "local": "local, member-local, project-local, skill-local"
      "dev": "dev,member-dev, project-dev, skill-dev"
      "test": "test, member-test, project-test, skill-test"

---
spring:
  profiles:
    active: local

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  h2:
    console:
      enabled: true
  datasource:
#    url: jdbc:h2:~/codingMates;AUTO_SERVER=true
    url: jdbc:h2:tcp://localhost/~/codingmates;AUTO_SERVER=true
    driver-class-name: org.h2.Driver
    username: sa
    password:
    initialization-mode: always
#    data: classpath:db.h2/import.sql

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        #하이버네이트가 실행하는 모든 SQL문을 콘솔로 출력해 준다.
        show_sql: true
        #콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현한다.
        format_sql: true
        #디버깅이 용이하도록 SQL문 이외에 추가적인 정보를 출력해 준다.
        use_sql_comments: true
    defer-datasource-initalization: true
    generate-ddl: true

---
spring:
  config:
    activate:
      on-profile: "dev"

#the aws rds details i have taken pic
#  datasource:
#    url: xx
#    driver-class-name: org.postgresql.Driver
#    username: postgres
#    password: disneyland77

  security:
    oauth2:
      client:
        registration:
          facebook:
            client-id: 626914439027452
            client-secret: ad25fd1b3eb2b01d3a5c7a92610b5697
            auth-endpoint: https://www.facebook.com/dialog/oauth
            token-endpoint: https://graph.facebook.com/oauth/access_token
            redirect-url: https://127.0.0.1/login/oauth2/code/facebook
            fetching_data_endpoint: https://graph.facebook.com/v15.0/debug_token

          google:
            client-id: 822931905259-5cu7f4rrlrc02st634a33gjku1sovj47.apps.googleusercontent.com
            client-secret: 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
            auth-endpoint: https://accounts.google.com/o/oauth2/auth
            redirect-url: http://localhost:8080/login/oauth2/code/google
            token-endpoint: https://www.googleapis.com/oauth2/v4/token
            fetching_data_endpoint: https://www.googleapis.com/oauth2/v2/userinfo
          github:
            client-id: b07e5cb0ab0e5a2eb7ab
            client-secret: 39564cb9ebb23b5d5c4415096efbfffd8c97cebc
            auth-endpoint: https://github.com/login/oauth/authorize
            token-endpoint: https://github.com/login/oauth/access_token
            fetching_data_endpoint: https://api.github.com/user
    jwt:
      token:
        secret-key: secretKeytestauthorizationjwtmanagetokenjwtmanagetoken
        expire-length: 1800000


    jpa:
      hibernate:
        ddl-auto: create
      properties:
        hibernate:
          format_sql: true

---
spring:
  config:
    activate:
      on-profile: "test"
  member-profile:
    path: "/imagetest/profiles"

  datasource:
    url: jdbc:h2:mem:test
    username: sa
    password:
    driver-class-name: org.h2.Driver

    jpa:
      hibernate:
        ddl-auto: create
      properties:
        hibernate:
          format_sql: true
  logging:
    level:
      org.hibernate.SQL: debug
